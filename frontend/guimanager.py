"""
Filename: guimanager.py
Version name: 1.0, 2021-07-22
Short description: callback functions for button presses. These are defined here so it wont get deleted
if mainwindow.py is regenerated by pyqt5-tools

(C) 2003-2021 IAS, Universitaet Stuttgart

"""

import sys

from PyQt5 import QtWidgets  # nopep8
sys.path.append('.')  # nopep8
sys.path.append('..')  # nopep8

from robotinomanager.robotinomanager import RobotinoManager  # nopep8
from commandserver.commandserver import CommandServer  # nopep8
from mescommunicator.mesclient import MESClient  # nopep8
from threading import Thread


class GUIManager(object):

    def __init__(self, ui):
        # ui instance
        self.ui = ui
        # setup instances of all servers and managers
        self.commandServer = CommandServer()
        self.mesClient = MESClient()
        self.robotinoManager = RobotinoManager(
            commandServer=self.commandServer, mesClient=self.mesClient)
        self.commandServer.setRobotinoManager(self.robotinoManager)
        # data for beuing displayed
        self.statesRobotinos = []
        self.transportTask = set()

    def __del__(self):
        self.commandServer.stopServer()
        self.mesClient.stopClient()

    # connect all buttons from ui with callback functions
    def connectCallbackFunction(self):
        """
        start/stop servers
        """
        self.ui.buttonStartCommandServer.clicked.connect(
            self.startCommandServer)
        self.ui.buttonStopCommandServer.clicked.connect(
            self.stopCommandServer)
        self.ui.buttonStartMesClient.clicked.connect(self.startMesClient)
        self.ui.buttonStopMesClient.clicked.connect(self.stopMesClient)

        """
        manual operations
        """
        self.ui.buttonUndock.clicked.connect(self.manualUndock)
        self.ui.buttonDock.clicked.connect(self.manualDock)
        self.ui.buttonUnloadCarrier.clicked.connect(self.manualUnloadCarrier)
        self.ui.buttonLoadCarrier.clicked.connect(self.manualLoadCarrier)
        self.ui.buttonDriveTo.clicked.connect(self.manualDriveTo)

    # fills out the rows of the tableview of robotinomanager
    def fillTableViewRobotinoManager(self):
        pass

    # fills out the rows of the tableview of mes
    def fillTableViewMES(self):
        pass

    """
    Callback functions
    """

    # callback function to start commandServer
    def startCommandServer(self):
        print("[FLEETIAS] Starting CommandServer...")
        Thread(target=self.commandServer.runServer).start()

    # callback function to stop commandServer
    def stopCommandServer(self):
        print("[FLEETIAS] Stopping CommandServer...")
        self.commandServer.stopServer()

    # callback function to start mesClient
    def startMesClient(self):
        print("[FLEETIAS] Starting MESClient...")
        Thread(target=self.mesClient.run).start()

    # callback function to stop mesClient
    def stopMesClient(self):
        print("[FLEETIAS] Stopping MESClient...")
        self.mesClient.stopClient()

    # callback function to manual trigger undocking
    def manualUndock(self):
        print("[FLEETIAS] Manual send command to robotino to undock")
        robotino = self.robotinoManager.getRobotino(
            self.ui.inputRobtinoId.value())
        if robotino != None:
            robotino.undock()
        else:
            print("[FLEETIAS] Couldnt execute command becaus robotino is not present")

    # callback function to manual trigger docking
    def manualDock(self):
        target = self.ui.inputResourceId.value()
        print(
            "[FLEETIAS] Manual send command to robotino to dock to resource " + str(target))
        robotino = self.robotinoManager.getRobotino(
            self.ui.inputRobtinoId.value())
        if robotino != None:
            robotino.dock(target)
        else:
            print("[FLEETIAS] Couldnt execute command becaus robotino is not present")

    # callback function to manual trigger unloading
    def manualUnloadCarrier(self):
        print("[FLEETIAS] Manual send command to robotino to unload carrier")
        robotino = self.robotinoManager.getRobotino(
            self.ui.inputRobtinoId.value())
        if robotino != None:
            robotino.unloadCarrier()
        else:
            print("[FLEETIAS] Couldnt execute command becaus robotino is not present")

    # callback function to manual trigger loading
    def manualLoadCarrier(self):
        print("[FLEETIAS] Manual send command to robotino to load carrier")
        robotino = self.robotinoManager.getRobotino(
            self.ui.inputRobtinoId.value())
        if robotino != None:
            robotino.loadCarrier()
        else:
            print("[FLEETIAS] Couldnt execute command becaus robotino is not present")

    # callback function to manual trigger driving to resource
    def manualDriveTo(self):
        target = self.ui.inputResourceId.value()
        print(
            "[FLEETIAS] Manual send command to robotino to drive to resource " + str(target))
        robotino = self.robotinoManager.getRobotino(
            self.ui.inputRobtinoId.value())
        if robotino != None:
            robotino.driveTo(target)
        else:
            print("[FLEETIAS] Couldnt execute command becaus robotino is not present")

    """
    Setter
    """

    def setStatesRobotino(self, statesRobotino):
        self.statesRobotinos = statesRobotino
        self.fillTableViewRobotinoManager()

    def addTransportTask( self, transportTask):
        self.transportTask.add(transportTask)
        self.fillTableViewMES()

    def deleteTransportTask(self, transportTask):
        self.transportTask.remove(transportTask)
        self.fillTableViewMES()
